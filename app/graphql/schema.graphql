"""
Authorization via Bearer Token.

Set all the fields in this object as HTTP headers when making
  request to use this.
"""
type Authorization {
  """
  User and his/her session as hash
  """
  accessToken: String!

  """
  User and his/her device as hash
  """
  client: String!

  """
  Authorization expiry in string seconds
  """
  expiry: String!

  """
  Authorization token type which is `Bearer` in this case
  """
  tokenType: String!

  """
  User unique authorization ID
  """
  uid: String!
}

type Mutation {
  """
  Register user.

  Once registered, an email is sent to the user's address for the confirmation link.
  """
  registerUser(input: RegisterUserMutationInput!): RegisterUserMutationPayload

  """
  Request a password reset via email.

  Once requested, an email is sent to the address for the reset password link.
  """
  requestPasswordReset(input: RequestPasswordResetMutationInput!): RequestPasswordResetMutationPayload

  """
  Sign in via email and password.
  """
  signIn(input: SignInMutationInput!): SignInMutationPayload
}

type Query {
  """
  Get the current user's information
  """
  currentUser: User
}

"""
Autogenerated input type of RegisterUserMutation
"""
input RegisterUserMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email.

  Validations:
  - Maximum of 254 characters
  - Must be of this format: `<name_part>@<domain_part>`
  """
  email: String!

  """
  User's password.

  Validations:
  - Maximum of 254 characters
  - Must contain a lowercase letter, an uppercase letter and a digit
  """
  password: String!
}

"""
Autogenerated return type of RegisterUserMutation
"""
type RegisterUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors.

  Operation Errors:
  - Email is already used
  """
  errors: [UserError!]!

  """
  Newly registered user
  """
  user: UnconfrimedUser
}

"""
Autogenerated input type of RequestPasswordResetMutation
"""
input RequestPasswordResetMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email
  """
  email: String!
}

"""
Autogenerated return type of RequestPasswordResetMutation
"""
type RequestPasswordResetMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - Email does not exist
  """
  errors: [UserError!]!
}

"""
Autogenerated input type of SignInMutation
"""
input SignInMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email
  """
  email: String!

  """
  User's new password.

  Validations:
  - Maximum of 254 characters
  - Must contain a lowercase letter, an uppercase letter and a digit
  """
  password: String!
}

"""
Autogenerated return type of SignInMutation
"""
type SignInMutationPayload {
  """
  User's authorization
  """
  authorization: Authorization

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - User is not yet confirmed
  - Invalid email/password
  """
  errors: [UserError!]!
}

"""
Electron user who signed up but hasn't confirmed yet.

The user must confirm the email sent to his address to gain access to the system.
"""
type UnconfrimedUser {
  """
  Email address of the user
  """
  email: String!
}

"""
DAO users who publish proposals and vote for them
"""
type User {
  """
  User's email
  """
  email: String!
}

"""
An user-readable error
"""
type UserError {
  """
  Which input final value this error came from
  """
  field: String

  """
  A description of the error
  """
  message: String!
}