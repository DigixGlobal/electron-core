"""
Application user data such as country.
"""
type AppUser {
  """
  The country the user is accessing from based on IP.
    If the country cannot be inferred or on the list, this is null.
  """
  country: CountryValue
}

"""
Autogenerated input type of ApproveApplyingKycMutation
"""
input ApproveApplyingKycMutationInput {
  """
  The ID of the KYC
  """
  applyingKycId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Expiration date for this KYC.

  Validations:
  - Must be a future date.
  """
  expirationDate: Date!
}

"""
Autogenerated return type of ApproveApplyingKycMutation
"""
type ApproveApplyingKycMutationPayload {
  """
  Approved KYC
  """
  applyingKyc: KycApplying

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - KYC is not pending
  - KYC not found
  """
  errors: [UserError!]!
}

"""
Authorization via Bearer Token.

Set all the fields in this object as HTTP headers when making
  request to use this.
"""
type Authorization {
  """
  User and his/her session as hash
  """
  accessToken: String!

  """
  User and his/her device as hash
  """
  client: String!

  """
  Authorization expiry in string seconds
  """
  expiry: String!

  """
  Authorization token type which is `Bearer` in this case
  """
  tokenType: String!

  """
  User unique authorization ID
  """
  uid: String!
}

"""
Autogenerated input type of ChangeEthAddressMutation
"""
input ChangeEthAddressMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  New user's eth address.

  Validations:
  - Must be a valid eth addresss
  - Already in use
  """
  ethAddress: String!
}

"""
Autogenerated return type of ChangeEthAddressMutation
"""
type ChangeEthAddressMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors
  """
  errors: [UserError!]!

  """
  Change eth address process
  """
  ethAddressChange: EthAddressChange
}

"""
Country for KYC
"""
type Country {
  """
  A flag if the country is blocked
  """
  blocked: Boolean!

  """
  Name of the country
  """
  name: String!

  """
  App value of the country
  """
  value: String!
}

"""
A country represented by a string that comes form `Country.value`
"""
scalar CountryValue

"""
A base64-encoded data URL (`data:image/png;base64;...`)
represented as a object with data and file type but no filename
"""
scalar DataUrl

"""
A date represented as a YYYY-MM-DD or iso8601 date
"""
scalar Date

"""
Autogenerated input type of DraftTier2KycMutation
"""
input DraftTier2KycMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Image data URL to prove identification is valid

  Validations:
  - Maximum of 10 MB size
  - JPEG or PNG files only
  """
  identificationPoseImage: DataUrl!

  """
  Expiration date of the ID.

  Validations:
  - Must not be expired or a future date
  """
  identificationProofExpirationDate: Date!

  """
  Image data URL to prove personal identification.

  Validations:
  - Maximum of 10 MB size
  - JPEG, PNG or PDF files only
  """
  identificationProofImage: DataUrl!

  """
  Code/number of the ID.

  Validations:
  - Maximum of 50 characters
  """
  identificationProofNumber: String!

  """
  Type of ID used
  """
  identificationProofType: KycIdentificationProofTypeEnum!

  """
  City address of the user.

  Validations:
  - Maximum of 250 characters
  """
  residenceCity: String!

  """
  Descriptive combination of unit/block/house number and street name of the user.

  Validations:
  - Maximum of 1000 characters
  """
  residenceLine1: String!

  """
  Extra descriptions about the address such as landmarks or corners.

  Validations:
  - Maximum of 1000 characters
  """
  residenceLine2: String

  """
  Postal code address of the user.

  Validations:
  - Maximum of 12 characters
  - Must be comprised of alphanumeric characters (`A-Z0-9`), spaces and dashes (`-`)
  - Must not end or begin with a dash
  """
  residencePostalCode: String!

  """
  Image data URL to prove personal residence

  Validations:
  - Maximum of 10 MB size
  - JPEG, PNG or PDF files only
  """
  residenceProofImage: DataUrl!

  """
  Kind/type of proof presented for residence
  """
  residenceProofType: KycResidenceProofTypeEnum!
}

"""
Autogenerated return type of DraftTier2KycMutation
"""
type DraftTier2KycMutationPayload {
  """
  Newly drafted KYC tier 2 application
  """
  applyingKyc: KycTier2

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - Not qualified for this tier
  - Already have a pending or active KYC
  """
  errors: [UserError!]!
}

"""
An eth address represented by a `String`.
"""
scalar EthAddress

"""
Changes in an user's Eth addressx
"""
type EthAddressChange {
  """
  New value of the Eth address
  """
  ethAddress: String!

  """
  Status of the change
  """
  status: EthAddressChangeStatusEnum!
}

"""
Eth change status enum
"""
enum EthAddressChangeStatusEnum {
  """
  Change is still being checked
  """
  PENDING

  """
  Change is completed
  """
  UPDATED
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Image type
"""
type Image {
  """
  Content type of the image such as `application/png`
  """
  contentType: String!

  """
  Base64 encoded string for the data itself
  """
  dataUrl: String!

  """
  URI for the image
  """
  uri: String!
}

"""
An user's KYC information.
"""
type Kyc {
  """
  If the user has drafted a KYC, this will be that KYC.
   Otherwise, this is just `null`
  """
  applyingKyc: KycApplying

  """
  Birthdate of the user
  """
  birthdate: Date

  """
  Citizenship country of the user
  """
  citizenship: CountryValue

  """
  Date when the KYC was submitted
  """
  createdAt: ISO8601DateTime!

  """
  Expiration date of the KYC.
   After this date, the KYC is marked `EXPIRED`
   and the user should submit again.
  """
  expirationDate: Date

  """
  First name of the user
  """
  firstName: String

  """
  Type ID
  """
  id: ID!

  """
  Pose image where the user is holding an ID
  """
  identificationPose: KycIdentificationPose!

  """
  ID image such as passport or national ID of the user
  """
  identificationProof: KycIdentificationProof!

  """
  Last name of the user
  """
  lastName: String

  """
  Residence of the user
  """
  residence: KycResidence!

  """
  Residential proof such as utility bills of the user
  """
  residenceProof: KycResidenceProof!

  """
  Current tier of the KYC
  """
  tier: KycTierEnum!

  """
  Date when the KYC was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
A KYC application that may be submitted and approved.
"""
union KycApplying = KycTier2

"""
ID pose for KYC
"""
type KycIdentificationPose {
  """
  Image of the pose with the ID.
   It is possible for this to be `null` after submitting
   since file storage is asynchronous, so be careful with the mutation.
   However, it should be a valid object in practice.
  """
  image: KycImage
}

"""
Identification proof for KYC
"""
type KycIdentificationProof {
  """
  Expiration date of the ID
  """
  expirationDate: Date!

  """
  Image of the ID.

  It is possible for this to be `null` after submitting
   since file storage is asynchronous, so be careful with the mutation.
   However, it should be a valid object in practice.
  """
  image: KycImage

  """
  Designated code/number for the ID
  """
  number: String!

  """
  Type of ID used
  """
  type: KycIdentificationProofTypeEnum!
}

"""
ID proof type
"""
enum KycIdentificationProofTypeEnum {
  """
  National Identity Card (Drivers License not accepted)
  """
  IDENTITY_CARD

  """
  National ID Card(Singapore Residents only)
  """
  NATIONAL_ID

  """
  International passport
  """
  PASSPORT
}

"""
Image/proof used for KYC such as jpegs, pngs or pdfs
"""
type KycImage {
  """
  Original image
  """
  original: Image!

  """
  Thumbnail of the image
  """
  thumbnail: Image!
}

"""
A KYC's residence information.
"""
type KycResidence {
  """
  Country of residence
  """
  country: CountryValue
}

"""
Residence proof for KYC
"""
type KycResidenceProof {
  """
  Image of the residence proof.
   It is possible for this to be `null` after submitting
   since file storage is asynchronous, so be careful with the mutation.
   However, it should be a valid object in practice.
  """
  image: KycImage

  """
  Kind of image presented as proof
  """
  type: KycResidenceProofTypeEnum!
}

"""
Type of residence proof for KYC
"""
enum KycResidenceProofTypeEnum {
  """
  Bank statement
  """
  BANK_STATEMENT

  """
  Utility bill such as electricity or water
  """
  UTILITY_BILL
}

"""
KYC status
"""
enum KycStatusEnum {
  """
  KYC is approved
  """
  APPROVED

  """
  KYC is approved by an KYC officer but not yet cascaded in the system
  """
  APPROVING

  """
  KYC is drafted and can be modified before submitting 
  """
  DRAFTED

  """
  KYC is pending and waiting for review from a KYC officer
  """
  PENDING

  """
  KYC is rejected and user shoudl resubmit again
  """
  REJECTED
}

"""
A tier two KYC application.
"""
type KycTier2 {
  """
  Date when the KYC was submitted
  """
  createdAt: ISO8601DateTime!

  """
  Type ID
  """
  id: ID!

  """
  Image of identification pose
  """
  identificationPoseImage: KycImage!

  """
  Expiration date of the identification proof
  """
  identificationProofExpirationDate: Date!

  """
  Image of the identification proof
  """
  identificationProofImage: KycImage!

  """
  Number of the identification proof
  """
  identificationProofNumber: String!

  """
  Type of the identification_proof
  """
  identificationProofType: KycIdentificationProofTypeEnum!

  """
  City of residence
  """
  residenceCity: String!

  """
  Line 1 address of residence
  """
  residenceLine1: String!

  """
  Line 2 address of residence
  """
  residenceLine2: String!

  """
  Postal code of residence
  """
  residencePostalCode: String!

  """
  Image of residence proof
  """
  residenceProofImage: KycImage!

  """
  Type of residence proof
  """
  residenceProofType: KycResidenceProofTypeEnum!

  """
  Current status of the KYC request
  """
  status: KycStatusEnum!

  """
  Date when the KYC was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
KYC tier
"""
enum KycTierEnum {
  """
  KYC is at the most basic level of usage
  """
  TIER_1

  """
  KYC is at the next level of usage
  """
  TIER_2
}

"""
This is just `CountryValue` but must be from a legal country.
 You can check blocked countries from `countries` query.
"""
scalar LegalCountryValue

type Mutation {
  """
  As a KYC officer, approve a pending KYC.

  Role: KYC Officer
  """
  approveApplyingKyc(input: ApproveApplyingKycMutationInput!): ApproveApplyingKycMutationPayload

  """
  As the current user, change your eth address.
   Since this involves a block chain transaction,
   it will be eventually updated.
  """
  changeEthAddress(input: ChangeEthAddressMutationInput!): ChangeEthAddressMutationPayload

  """
  As the current user of KYC tier one, draft a tier 2 KYC to access more features of the app.
  """
  draftTier2Kyc(input: DraftTier2KycMutationInput!): DraftTier2KycMutationPayload

  """
  Register user.

  Once registered, an email is sent to the user's address for the confirmation link.
  """
  registerUser(input: RegisterUserMutationInput!): RegisterUserMutationPayload

  """
  As a KYC officer, reject a pending KYC with a reason.

  Role: KYC Officer
  """
  rejectApplyingKyc(input: RejectApplyingKycMutationInput!): RejectApplyingKycMutationPayload

  """
  Request a password reset via email.

  Once requested, an email is sent to the address for the reset password link.
  """
  requestPasswordReset(input: RequestPasswordResetMutationInput!): RequestPasswordResetMutationPayload

  """
  Given a password reset token, change the user password to a new one.

  Once the token is used, it cannot be used again.
  """
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutationPayload

  """
  Sign in via email and password.
  """
  signIn(input: SignInMutationInput!): SignInMutationPayload

  """
  As the current user with an drafted applying KYC,
   submit the KYC for review from an KYC officer.

  Also, the user must have set an eth address to submit.
  """
  submitApplyingKyc(input: SubmitApplyingKycMutationInput!): SubmitApplyingKycMutationPayload
}

type Query {
  """
  Get the user's application status
  """
  appUser: AppUser

  """
  List of countries for KYC
  """
  countries(
    """
    Filter countries if they are blocked.
     By default, this returns the usable or legal countries.
    """
    blocked: Boolean = false
  ): [Country!]!

  """
  Get the current user's information
  """
  currentUser: User

  """
  List of rejection reasons for KYC rejection
  """
  rejectionReasons: [RejectionReason!]!
}

"""
Autogenerated input type of RegisterUserMutation
"""
input RegisterUserMutationInput {
  """
  Birth date of the user.

  Validations:
  - Must be 18 years or older
  """
  birthdate: Date!

  """
  Country of the user's citizenship.

  Validations: None
  """
  citizenship: LegalCountryValue!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Country of the user's country of residence.

  Validations: None
  """
  countryOfResidence: LegalCountryValue!

  """
  User's email.

  Validations:
  - Maximum of 254 characters
  - Must be of this format: `<name_part>@<domain_part>`
  """
  email: String!

  """
  First name of the user.

  Validations:
  - Maximum of 150 characters
  """
  firstName: String!

  """
  Last name of the user.

  Validations:
  - Maximum of 150 characters
  """
  lastName: String!

  """
  User's password.

  Validations:
  - Minimum of 6 characters
  - Maximum of 128 characters
  """
  password: String!

  """
  Terms and conditions accepted by the user.

  Validations: None
  """
  tncVersion: String!
}

"""
Autogenerated return type of RegisterUserMutation
"""
type RegisterUserMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors.

  Operation Errors:
  - Email is already used
  """
  errors: [UserError!]!
}

"""
Autogenerated input type of RejectApplyingKycMutation
"""
input RejectApplyingKycMutationInput {
  """
  The ID of the KYC
  """
  applyingKycId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Reason for rejecting the KYC
  """
  rejectionReason: RejectionReasonValue!
}

"""
Autogenerated return type of RejectApplyingKycMutation
"""
type RejectApplyingKycMutationPayload {
  """
  Approved KYC
  """
  applyingKyc: KycApplying

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - KYC is not pending
  - KYC not found
  """
  errors: [UserError!]!
}

"""
Reasons for rejecting a KYC
"""
type RejectionReason {
  """
  Descriptive name of the reason
  """
  name: String!

  """
  Value of the reason
  """
  value: String!
}

"""
A rejection rason represented by a string that comes form `RejectionReason.value`
"""
scalar RejectionReasonValue

"""
Autogenerated input type of RequestPasswordResetMutation
"""
input RequestPasswordResetMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email
  """
  email: String!
}

"""
Autogenerated return type of RequestPasswordResetMutation
"""
type RequestPasswordResetMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - Email does not exist
  """
  errors: [UserError!]!
}

"""
Autogenerated input type of ResetPasswordMutation
"""
input ResetPasswordMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's new password.

  Validations:
  - Maximum of 254 characters
  - Must contain a lowercase letter, an uppercase letter and a digit
  """
  password: String!

  """
  User's password confirmation.

  Validations:
  - Must match password
  """
  passwordConfirmation: String!

  """
  The password reset token sent via email.

  Validations:
  - Must be valid
  """
  token: String!
}

"""
Autogenerated return type of ResetPasswordMutation
"""
type ResetPasswordMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - Email does not exist
  """
  errors: [UserError!]!
}

"""
Autogenerated input type of SignInMutation
"""
input SignInMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  User's email
  """
  email: String!

  """
  User's new password.

  Validations:
  - Maximum of 254 characters
  - Must contain a lowercase letter, an uppercase letter and a digit
  """
  password: String!
}

"""
Autogenerated return type of SignInMutation
"""
type SignInMutationPayload {
  """
  User's authorization
  """
  authorization: Authorization

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - User is not yet confirmed
  - Invalid email/password
  """
  errors: [UserError!]!
}

"""
Autogenerated input type of SubmitApplyingKycMutation
"""
input SubmitApplyingKycMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SubmitApplyingKycMutation
"""
type SubmitApplyingKycMutationPayload {
  """
  Submitted applying KYC
  """
  applyingKyc: KycApplying

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Mutation errors

  Operation Errors:
  - No drafted applying KYC
  - Eth address not yet set
  """
  errors: [UserError!]!
}

"""
DAO users who publish proposals and vote for them
"""
type User {
  """
  User's email
  """
  email: String!

  """
  User's ethereum address
  """
  ethAddress: EthAddress

  """
  User's ethereum address
  """
  ethAddressChange: EthAddressChange

  """
  Type ID
  """
  id: ID!

  """
  User KYC information
  """
  kyc: Kyc!

  """
  The terms and condition version which this user accepted.
  """
  tncVersion: String!
}

"""
An user-readable error
"""
type UserError {
  """
  Which input final value this error came from
  """
  field: String

  """
  A description of the error
  """
  message: String!
}